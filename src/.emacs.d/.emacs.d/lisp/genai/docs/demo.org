* Emacs client for LLM

** Commands
M-x genai-on-region RET (C-M-g in my case)
M-x genai-next-code-blocks RET (M-n in my case)
M-x genai-previoue-code-blocks RET (M-p in my case)
M-x genai-show-history RET
M-x genai-history-reset RET

** Working without template
*** Hello. What is your name?

** Working with template
- Templates are customizable by editing markdown files in the [[templates]] directory.
- A capital letter in a file name will be used as a shortcut for selection.

*** Program Template

def generate_fibonacci_sequence(n):
    """
    Generate Fibonacci sequence up to the nth element.

    Parameters
    ----------
    n : int
        The number of elements in the Fibonacci sequence to generate.

    Returns
    -------
    list
        The Fibonacci sequence up to the nth element.
    """
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]

    seq = [0, 1]
    for i in range(2, n):
        seq.append(seq[-1] + seq[-2])

    return seq


*** Email Revision Template
Dear Mr. John,

I hope this message finds you well.

Could we schedule a time to discuss the integration of Generative AI into Emacs?

Looking forward to your response.

Best regards,
Yusuke Watanabe



** Code blocks are highlighted and easy to navigate with automatic copy.
*** Tell me several Python code snippets.
def fibonacci(n):
    """
    Generate a Fibonacci sequence up to the nth term.

    Parameters
    ----------
    n : int
        The number of terms to generate.

    Returns
    -------
    list
        The Fibonacci sequence up to the nth term.
    """
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]

    fib_sequence = [0, 1]
    for i in range(2, n):
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])

    return fib_sequence

def fibonacci(n):
    """
    Generate a Fibonacci sequence up to the nth term.

    Parameters
    ----------
    n : int
        The number of terms to generate.

    Returns
    -------
    list
        The Fibonacci sequence up to the nth term.
    """
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]

    fib_sequence = [0, 1]
    for i in range(2, n):
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])

    return fib_sequence

def remove_duplicates(lst):
    """
    Remove duplicates from a list while maintaining order.

    Parameters
    ----------
    lst : list
        The list from which to remove duplicates.

    Returns
    -------
    list
        The list without duplicates.
    """
    seen = set()
    result = []
    for item in lst:
        if item not in seen:
            seen.add(item)
            result.append(item)
    return result


import pandas as pd

def read_csv_file(file_path):
    """
    Read a CSV file into a DataFrame.

    Parameters
    ----------
    file_path : str
        The path to the CSV file.

    Returns
    -------
    pd.DataFrame
        The DataFrame containing the CSV data.
    """
    return pd.read_csv(file_path)

** Chat history is saved as JSON files
- history-human-secret.json
- history-ai-secret.json
- M-x genai-show-history RET

** Dependencies
- Python and a Python package called 'mngs==1.5.5'
